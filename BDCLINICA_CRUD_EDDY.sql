--TABLA EMPLEADOS..............................................................
--AGREGAR......................................................................
GO
CREATE OR ALTER PROCEDURE SP_INSERTAR_EMPLEADOS(
										@ID_EMPLEADO INT,
										@NUM_CEDULA VARCHAR(10),
										@NUM_CARNET VARCHAR(10),
										@NOMBRE VARCHAR(20),
										@APELLIDO_01 VARCHAR(20),
										@APELLIDO_02 VARCHAR(20),
										@PAIS VARCHAR(20),
										@PROVINCIA VARCHAR(20),
										@SEXO VARCHAR(20),
										@FECHA_NACIMIENTO DATE,
										@ESTADO_CIVIL VARCHAR(10),
										@CORREO_ELECTRONICO VARCHAR(30),
										@NUM_TELEFONO VARCHAR(10),
										@ESTADO VARCHAR(3),
										@MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY --CONTROL DE ERRORES
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM EMPLEADOS WHERE ID_EMPLEADO = @ID_EMPLEADO))
				BEGIN
					INSERT INTO EMPLEADOS(ID_EMPLEADO, NUM_CEDULA, NUM_CARNET, NOMBRE, APELLIDO_01, APELLIDO_02, PAIS, PROVINCIA, SEXO, FECHA_NACIMIENTO, ESTADO_CIVIL, CORREO_ELECTRONICO, NUM_TELEFONO, ESTADO)
						VALUES(@ID_EMPLEADO, @NUM_CEDULA, @NUM_CARNET, @NOMBRE, @APELLIDO_01, @APELLIDO_02, @PAIS, @PROVINCIA, @SEXO, @FECHA_NACIMIENTO, @ESTADO_CIVIL, @CORREO_ELECTRONICO, @NUM_TELEFONO, @ESTADO)

					SET @MSJ = 'EMPLEADO AGREGADO CORRECTAMENTE'
				END
			ELSE
				SET @MSJ = 'EL EMPLEADO YA EXISTE'
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH --SI HAY ERRORES AQUI LOS ATRAPA Y EL ROLLBACK DEVUELVE LA EJECUCION
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE();
	END CATCH
GO			

--ACTUALIZAR...................................................................
CREATE PROCEDURE SP_ACTUALIZAR_EMPLEADO(
								@ID_EMPLEADO INT,
								@NUM_CEDULA VARCHAR(10),
								@NUM_CARNET VARCHAR(10),
								@NOMBRE VARCHAR(20),
								@APELLIDO_01 VARCHAR(20),
								@APELLIDO_02 VARCHAR(20),
								@PAIS VARCHAR(20),
								@PROVINCIA VARCHAR(20),
								@SEXO VARCHAR(20),
								@FECHA_NACIMIENTO DATE,
								@ESTADO_CIVIL VARCHAR(10),
								@CORREO_ELECTRONICO VARCHAR(30),
								@NUM_TELEFONO VARCHAR(10),
								@ESTADO VARCHAR(3),
								@MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY --CONTROL DE ERRORES
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM EMPLEADOS WHERE ID_EMPLEADO = @ID_EMPLEADO))
				BEGIN
					UPDATE EMPLEADOS SET
						NUM_CEDULA = @NUM_CEDULA,
						NUM_CARNET = @NUM_CARNET,
						NOMBRE = @NOMBRE,
						APELLIDO_01 = @APELLIDO_01,
						APELLIDO_02 = @APELLIDO_02,
						PAIS = @PAIS,
						PROVINCIA = @PROVINCIA,
						SEXO = @SEXO,
						FECHA_NACIMIENTO = @FECHA_NACIMIENTO,
						ESTADO_CIVIL = @ESTADO_CIVIL,
						CORREO_ELECTRONICO = @CORREO_ELECTRONICO,
						NUM_TELEFONO = @NUM_TELEFONO,
						ESTADO = @ESTADO
					WHERE ID_EMPLEADO = @ID_EMPLEADO
					SET @MSJ = 'EMPLEADO ACTUALIZADO SATISFACTORIAMENTE'
				END
			ELSE
				SET @MSJ = 'EL EMPLEADO NO SE PUEDE ACTUALIZAR PORQUE NO EXISTE'
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH --SI HAY ERRORES AQUÍ LOS ATRAPA Y EL ROLLBACK DEVUELVE LA EJECUCIÓN
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--BORRAR.......................................................................
CREATE PROCEDURE SP_BORRAR_EMPLEADO(
							@ID_EMPLEADO INT,
							@NUM_CEDULA VARCHAR(10),
							@NUM_CARNET VARCHAR(10),
							@NOMBRE VARCHAR(20),
							@APELLIDO_01 VARCHAR(20),
							@APELLIDO_02 VARCHAR(20),
							@PAIS VARCHAR(20),
							@PROVINCIA VARCHAR(20),
							@SEXO VARCHAR(20),
							@FECHA_NACIMIENTO DATE,
							@ESTADO_CIVIL VARCHAR(10),
							@CORREO_ELECTRONICO VARCHAR(30),
							@NUM_TELEFONO VARCHAR(10),
							@ESTADO VARCHAR(3),
							@MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY--CONTROL DE ERRORES
		BEGIN TRANSACTION	
			IF (EXISTS(SELECT 1 FROM EMPLEADOS WHERE ID_EMPLEADO = @ID_EMPLEADO))
				BEGIN
					DELETE FROM EMPLEADOS WHERE ID_EMPLEADO = @ID_EMPLEADO
					SET @MSJ = 'EMPLEADO BORRADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL EMPLEADO NO SE PUEDE BORRAR PORQUE NO EXISTE'
				END	
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--.............................................................................
--.............................................................................

--TABLA PACIENTES..............................................................
--AGREGAR......................................................................
CREATE PROCEDURE SP_INSERTAR_PACIENTE(
							@ID_PACIENTE INT,
							@NUM_CEDULA VARCHAR(10),
							@NOMBRE VARCHAR(20),
							@APELLIDO_01 VARCHAR(20),
							@APELLIDO_02 VARCHAR(20),
							@PAIS VARCHAR(20),
							@PROVINCIA VARCHAR(20),
							@SEXO VARCHAR(20),
							@FECHA_NACIMIENTO DATE,
							@ESTADO_CIVIL VARCHAR(10),
							@CORREO_ELECTRONICO VARCHAR(30),
							@NUM_TELEFONO VARCHAR(10),
							@TIPO_SANGRE VARCHAR(10),
							@ESTADO VARCHAR(3),
							@MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION	
			IF NOT EXISTS(SELECT 1 FROM PACIENTES WHERE ID_PACIENTE = @ID_PACIENTE)
				BEGIN
					INSERT INTO PACIENTES (ID_PACIENTE, NUM_CEDULA, NOMBRE, APELLIDO_01, APELLIDO_02, PAIS, PROVINCIA, SEXO, FECHA_NACIMIENTO, ESTADO_CIVIL, CORREO_ELECTRONICO, NUM_TELEFONO, TIPO_SANGRE, ESTADO)
					VALUES (@ID_PACIENTE, @NUM_CEDULA, @NOMBRE, @APELLIDO_01, @APELLIDO_02, @PAIS, @PROVINCIA, @SEXO, @FECHA_NACIMIENTO, @ESTADO_CIVIL, @CORREO_ELECTRONICO, @NUM_TELEFONO, @TIPO_SANGRE, @ESTADO)
		
					SET @MSJ = 'PACIENTE AGREGADO CORRECTAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL PACIENTE YA EXISTE'
				END	
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE();
	END CATCH
GO

--ACTUALIZAR...................................................................
CREATE PROCEDURE SP_ACTUALIZAR_PACIENTE(
							@ID_PACIENTE INT,
							@NUM_CEDULA VARCHAR(10),
							@NOMBRE VARCHAR(20),
							@APELLIDO_01 VARCHAR(20),
							@APELLIDO_02 VARCHAR(20),
							@PAIS VARCHAR(20),
							@PROVINCIA VARCHAR(20),
							@SEXO VARCHAR(20),
							@FECHA_NACIMIENTO DATE,
							@ESTADO_CIVIL VARCHAR(10),
							@CORREO_ELECTRONICO VARCHAR(30),
							@NUM_TELEFONO VARCHAR(10),
							@TIPO_SANGRE VARCHAR(10),
							@ESTADO VARCHAR(3),
							@MSJ VARCHAR(200) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM PACIENTES WHERE ID_PACIENTE = @ID_PACIENTE))
				BEGIN
					UPDATE PACIENTES SET
						NUM_CEDULA = @NUM_CEDULA,
						NOMBRE = @NOMBRE,
						APELLIDO_01 = @APELLIDO_01,
						APELLIDO_02 = @APELLIDO_02,
						PAIS = @PAIS,
						PROVINCIA = @PROVINCIA,
						SEXO = @SEXO,
						FECHA_NACIMIENTO = @FECHA_NACIMIENTO,
						ESTADO_CIVIL = @ESTADO_CIVIL,
						CORREO_ELECTRONICO = @CORREO_ELECTRONICO,
						NUM_TELEFONO = @NUM_TELEFONO,
						TIPO_SANGRE = @TIPO_SANGRE,
						ESTADO = @ESTADO
					WHERE ID_PACIENTE = @ID_PACIENTE
					SET @MSJ = 'PACIENTE ACTUALIZADO SATISFACTORIAMENTE'
				END
			ELSE
				SET @MSJ = 'EL PACIENTE NO SE PUEDE ACTUALIZAR PORQUE NO EXISTE'
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--.............................................................................
--.............................................................................

--TABLA MEDICOS................................................................
--AGREGAR......................................................................
CREATE PROCEDURE SP_INSERTAR_MEDICO(
						@ID_MEDICO INT,
						@ID_EMPLEADO INT,
						@ESPECIALIDAD VARCHAR(20),
						@NUM_CERTIFICACION VARCHAR(20),
						@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION    
			IF NOT EXISTS (SELECT 1 FROM MEDICOS WHERE ID_MEDICO = @ID_MEDICO)
				BEGIN
					INSERT INTO MEDICOS (ID_MEDICO, ID_EMPLEADO, ESPECIALIDAD, NUM_CERTIFICACION)
					VALUES (@ID_MEDICO, @ID_EMPLEADO, @ESPECIALIDAD, @NUM_CERTIFICACION)
        
					SET @MSJ = 'MÉDICO AGREGADO CORRECTAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL MÉDICO YA EXISTE'
		END    
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE();
	END CATCH
GO

--ACTUALIZAR...................................................................
CREATE PROCEDURE SP_ACTUALIZAR_MEDICO(
							@ID_MEDICO INT,
							@ID_EMPLEADO INT,
							@ESPECIALIDAD VARCHAR(20),
							@NUM_CERTIFICACION VARCHAR(20),
							@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION	
			IF (EXISTS(SELECT 1 FROM MEDICOS WHERE ID_MEDICO = @ID_MEDICO))
				BEGIN
					UPDATE MEDICOS SET
						ID_EMPLEADO = @ID_EMPLEADO,
						ESPECIALIDAD = @ESPECIALIDAD,
						NUM_CERTIFICACION = @NUM_CERTIFICACION
					WHERE ID_MEDICO = @ID_MEDICO
		
					SET @MSJ = 'MÉDICO ACTUALIZADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL MÉDICO NO SE PUEDE ACTUALIZAR PORQUE NO EXISTE'
				END	
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--BORRAR.......................................................................
CREATE PROCEDURE SP_BORRAR_MEDICO(
						@ID_MEDICO INT,
						@ID_EMPLEADO INT,
						@ESPECIALIDAD VARCHAR(20),
						@NUM_CERTIFICACION VARCHAR(20),
						@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM MEDICOS WHERE ID_MEDICO = @ID_MEDICO))
				BEGIN
					DELETE FROM MEDICOS WHERE ID_MEDICO = @ID_MEDICO
					SET @MSJ = 'MÉDICO BORRADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL MÉDICO NO SE PUEDE BORRAR PORQUE NO EXISTE'
			END	
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--.............................................................................
--.............................................................................

--TABLA AUXILIARES.............................................................
--AGREGAR......................................................................
CREATE PROCEDURE SP_INSERTAR_AUXILIAR(
							@ID_AUXILIAR INT,
							@ID_EMPLEADO INT,
							@AREA VARCHAR(20),
							@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION	
			IF NOT EXISTS (SELECT 1 FROM AUXILIARES WHERE ID_AUXILIAR = @ID_AUXILIAR)
				BEGIN
					INSERT INTO AUXILIARES (ID_AUXILIAR, ID_EMPLEADO, AREA)
					VALUES (@ID_AUXILIAR, @ID_EMPLEADO, @AREA)
						SET @MSJ = 'AUXILIAR AGREGADO CORRECTAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL AUXILIAR YA EXISTE'
				END	
		COMMIT TRANSACTION
	END TRY

BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE();
END CATCH
GO

--ACTUALIZAR...................................................................
CREATE PROCEDURE SP_ACTUALIZAR_AUXILIAR(
								@ID_AUXILIAR INT,
								@ID_EMPLEADO INT,
								@AREA VARCHAR(20),
								@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION	
			IF (EXISTS(SELECT 1 FROM AUXILIARES WHERE ID_AUXILIAR = @ID_AUXILIAR))
				BEGIN
					UPDATE AUXILIARES SET
						ID_EMPLEADO = @ID_EMPLEADO,
						AREA = @AREA
					WHERE ID_AUXILIAR = @ID_AUXILIAR

					SET @MSJ = 'AUXILIAR ACTUALIZADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL AUXILIAR NO SE PUEDE ACTUALIZAR PORQUE NO EXISTE'
				END
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--BORRAR.......................................................................
CREATE PROCEDURE SP_ELIMINAR_AUXILIAR(
							@ID_AUXILIAR INT,
							@ID_EMPLEADO INT,
							@AREA VARCHAR(20),
							@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM AUXILIARES WHERE ID_AUXILIAR = @ID_AUXILIAR))
				BEGIN
					DELETE FROM AUXILIARES WHERE ID_AUXILIAR = @ID_AUXILIAR
					SET @MSJ = 'AUXILIAR BORRADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL AUXILIAR NO SE PUEDE BORRAR PORQUE NO EXISTE'
				END
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--.............................................................................
--.............................................................................

--TABLA SECRETARIOS............................................................
--AGREGAR......................................................................
CREATE PROCEDURE SP_INSERTAR_SECRETARIO(
								@ID_SECRETARIO INT,
								@ID_EMPLEADO INT,
								@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION    
			IF NOT EXISTS (SELECT 1 FROM SECRETARIOS WHERE ID_SECRETARIO = @ID_SECRETARIO)
				BEGIN
					INSERT INTO SECRETARIOS (ID_SECRETARIO, ID_EMPLEADO)
					VALUES (@ID_SECRETARIO, @ID_EMPLEADO)        
					SET @MSJ = 'SECRETARIO AGREGADO CORRECTAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL SECRETARIO YA EXISTE'
				END    
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE();
	END CATCH
GO

--ACTUALIZAR...................................................................
CREATE PROCEDURE SP_ACTUALIZAR_SECRETARIO (
								@ID_SECRETARIO INT,
								@ID_EMPLEADO INT,
								@MSJ VARCHAR(100) OUTPUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION	
			IF (EXISTS(SELECT 1 FROM SECRETARIOS WHERE ID_SECRETARIO = @ID_SECRETARIO))
				BEGIN
					UPDATE SECRETARIOS SET
						ID_EMPLEADO = @ID_EMPLEADO
					WHERE ID_SECRETARIO = @ID_SECRETARIO

					SET @MSJ = 'SECRETARIO ACTUALIZADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL SECRETARIO NO SE PUEDE ACTUALIZAR PORQUE NO EXISTE'
				END	
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

--BORRAR.......................................................................
CREATE PROCEDURE SP_ELIMINAR_SECRETARIOS
	@ID_SECRETARIO INT,
	@ID_EMPLEADO INT,
	@MSJ VARCHAR(100) OUTPUT
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF (EXISTS(SELECT 1 FROM SECRETARIOS WHERE ID_SECRETARIO = @ID_SECRETARIO))
				BEGIN
					DELETE FROM SECRETARIOS WHERE ID_SECRETARIO = @ID_SECRETARIO
					SET @MSJ = 'AUXILIAR BORRADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN
					SET @MSJ = 'EL AUXILIAR NO SE PUEDE BORRAR PORQUE NO EXISTE'
				END
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
